void customSync(){ //Two channel interline sequence, with external trigger between steps
  elapsedMicros duration[] = {0,0}; //Duration timer for sequence steps for both channels
  uint16_t sync_step[] = {0,0}; //sequence step counter
  uint32_t interline_timeout = 2*sync.s.confocal_mirror_period; //Timeout to stop looking for mirror sync.
  uint32_t pwm_clock_cycles[] = {0,0}; //The number of clock cycles equivalent to the PWM duration
  uint32_t unidirectional_status_window = sync.s.confocal_delay[0] + sync.s.confocal_delay[1] + sync.s.confocal_delay[2] + 2*status_step_clock_duration; //Number of clock cycles between end of interline sequence and next trigger
  float pwm_freq = 180000000/(float) sync.s.confocal_mirror_period; //Get the frequency of the mirror in Hz
  float pwm_ratio = (float) sync.s.confocal_delay[1] / (float) sync.s.confocal_mirror_period; //Ratio of LED on time to total mirror period
  boolean shutter_state; //Logical state of shutter input
  uint8_t active_seq = false; //Track which sequence table is active for each flyback
  boolean temp_state = false; //Temporarily store state to allow channel swapping over-ride by toggling the state

  sync.s.mode = 2; //Temporarily set sync mode to confocal to load confocal sequence tables
  initializeSeq();
  sync.s.mode = 4; //Restore sync mode

  pinMode(pin.INTERLINE, OUTPUT); //Set interline pin as output to decouple from PWM
  
  if(sync.s.confocal_mirror_period > unidirectional_status_window) unidirectional_status_window = sync.s.confocal_mirror_period - unidirectional_status_window;
  else unidirectional_status_window = 0;
  noInterrupts(); //Turn off interrupts for exact interline timing

  //Lamda trigger sync funtions ---------------------------------------------------------------------------------------------------------------
  auto waitForTrigger = [&] (){ //Wait for the trigger event
    cpu_cycles = ARM_DWT_CYCCNT; //Reset inerline timer
    while(digitalReadFast(pin.INPUTS[sync.s.confocal_channel]) != active_seq && ARM_DWT_CYCCNT-cpu_cycles < interline_timeout); //Wait for trigger to match polarity
    cpu_cycles = ARM_DWT_CYCCNT; //Reset interline timer
  };

  auto waitForTriggerReset = [&] (){ //Wait for the trigger event to reset - used to initially sync the LED driver to the trigger input
    cpu_cycles = ARM_DWT_CYCCNT; //Reset inerline timer
    while(digitalReadFast(pin.INPUTS[sync.s.confocal_channel]) == active_seq && ARM_DWT_CYCCNT-cpu_cycles < interline_timeout); //Wait for trigger to reset polarity
    cpu_cycles = ARM_DWT_CYCCNT; //Reset interline timer
  };

  auto switchChannel = [&] (){ //Switch channels with each interline
    if(conf.c.led_active[current_status.s.led_channel]){ //Check if the channel is active
      for(int a=0; a<4; a++){ //Toggle channel relays
        if(conf.c.led_channel[a] == current_status.s.led_channel) digitalWriteFast(pin.RELAY[a], pin.RELAY_CLOSE);
        else digitalWriteFast(pin.RELAY[a], !pin.RELAY_CLOSE);
      }
      analogWrite(pin.DAC0, current_status.s.led_current);
    }
  };
  //-----------------------------------------------------------------------------------------------------------------------------------------------------
  
  pinMode(pin.INPUTS[0], INPUT); //Set shutter input pin to input
  pinMode(pin.INPUTS[sync.s.confocal_channel], INPUT); //Set sync input pin to input
  pinMode(pin.INTERLINE, OUTPUT); //Disconnect the 
  
  while(!current_status.s.mode && sync.s.mode == 4){ //This loop is maintained as long as in confocal sync mode - checked each time the status state changes (imaging/standby)
    memset(sync_step, 0, sizeof(sync_step)); //Reset two channel sync step counter - https://stackoverflow.com/questions/9146395/reset-c-int-array-to-zero-the-fastest-way
    shutter_state = digitalReadFast(pin.INPUTS[0]); //Get state of shutter
    current_status.s.state = (shutter_state == sync.s.shutter_polarity);

    active_channel = current_status.s.led_channel;
    
    temp_state = current_status.s.state;
    digitalWriteFast(pin.LED[2], HIGH);
    for(int a=0; a<2; a++){
      active_seq = a;
      current_status.s.state = active_seq;
      getSeqStep(sync_step[active_seq]); //Get first sequence step
      duration[active_seq] = 0; //Reset seq timers
      pwm_clock_cycles[active_seq] = round(((float) current_status.s.led_pwm * (float) sync.s.confocal_delay[1])/65535); //Calculate the number of clock cycles to leave the LED on during delay #2 to match the needed % PWM
    }
    current_status.s.state = temp_state;
    
    cpu_cycles = ARM_DWT_CYCCNT; //Reset interline timer
    waitForTriggerReset();
    waitForTrigger();  //Catch first trigger to resync timing - prevents starting stim later 
    checkStatus(); //Check status at least once per mirror cycle
    if(update_flag) goto quit; //Exit on update
    
    while(shutter_state == digitalReadFast(pin.INPUTS[0]) && !update_flag){ //While shutter state doesn't change and driver still in digital sync mode - checked each time a seq step is complete
      if(sync_step[active_seq] < seq_steps[current_status.s.state]){ //If the end of the sequence list has not been reached
        
        switchChannel(); 
        
        if(current_status.s.state){ //If scanning, convert PWM to clock cycles
          pwm_clock_cycles[active_seq] = round(((float) current_status.s.led_pwm * (float) sync.s.confocal_delay[1])/65535); //Calculate the number of clock cycles to leave the LED on during delay #2 to match the needed % PWM
          pinMode(pin.INTERLINE, OUTPUT); //Disconnect interline pin from PWM bus
        }
        else{ //Otherwise hold LED off in standby
          digitalWriteFast(pin.INTERLINE, LOW);  
        }
               
        while(shutter_state == digitalReadFast(pin.INPUTS[0]) && !update_flag && (duration[active_seq] < seq.s.led_duration || seq.s.led_duration == 0)){ //Loop until shutter changes, update, or seq duration times out (0 = hold - no timeout) - Interline loop
          checkStatus(); //Check status at least once per mirror cycle
          if(update_flag) goto quit;
          if(current_status.s.state){ //If shutter is open (actively scanning) perform interline modulation
            
            waitForTrigger();
            while(ARM_DWT_CYCCNT - cpu_cycles < sync.s.confocal_delay[0]); //Wait for delay #1
            if(sync.s.sync_output_channel) digitalWriteFast(pin.OUTPUTS[sync.s.sync_output_channel-1], active_seq); //Toggle Sync
            digitalWriteFast(pin.INTERLINE, HIGH);
            cpu_cycles += sync.s.confocal_delay[0]; //Increment interline timer
            while(ARM_DWT_CYCCNT - cpu_cycles < pwm_clock_cycles[active_seq]); //Wait for PWM delay
            digitalWriteFast(pin.INTERLINE, LOW);
            while(ARM_DWT_CYCCNT - cpu_cycles < sync.s.confocal_delay[1]); //Wait for end of delay #2
            cpu_cycles += sync.s.confocal_delay[1]; //Increment interline timer

            //Switch channels - 3 Âµs
            temp_state = current_status.s.state;
            active_seq = !active_seq; //Swich seq tables between lines
            current_status.s.state = active_seq;
            getSeqStep(sync_step[active_seq]); //Get next sequence step
            current_status.s.state = temp_state;
            switchChannel();  
          }
        }
        duration[active_seq] -= seq.s.led_duration; //Reset duration timer 
        sync_step[active_seq]++; //Increment the sync step counter
        getSeqStep(sync_step[active_seq]); //Get next sequence step
      }
      else{ //Report error if driver ran off the end of the sequence list (i.e. never encountered a hold)
        temp_size = sprintf(temp_buffer, "-Error: Confocal Sync - %s reached the end of the sequence without encountering a hold.", current_status.s.state ? "STANDBY":"SCANNING");
        temp_buffer[0] = prefix.message;
        usb.send((const unsigned char*) temp_buffer, temp_size);
        duration[active_seq] = 0;
        while(duration[active_seq] < 200000){
          checkStatus(); //This can happen if there was rapid bounce in the trigger, so pause to avoid spamming this error for every bounce
          if(update_flag) goto quit; //Exit on update
        }
        goto quit;
      }
    }
  }
  quit:
    analogWriteFrequency(pin.INTERLINE, pin.LED_FREQ); //Restore the interline timer to its defaul value: https://www.pjrc.com/teensy/td_pulse.html
    interrupts();
    pinMode(pin.ANALOG_SELECT, OUTPUT);
    digitalWriteFast(pin.ANALOG_SELECT, LOW);
    external_analog = false;
}