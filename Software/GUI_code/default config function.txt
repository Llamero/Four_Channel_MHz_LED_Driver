#include "pinSetup.h"
#include "usbSerial.h"
#include <EEPROM.h>

struct configurationStruct{
  const static uint8_t prefix = 2;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  char driver_name[16]; //Name of LED driver: "default name"
  char led_names[4][16]; //Name of each LED channel
  boolean led_active[4]; //Whether LED channel is in use: {false, false, false, false}
  uint16_t current_limit[4]; //Current limit for each channel on DAC values: {0,0,0,0}
  uint8_t led_channel[4]; //SSR channels used for each LED: {1,2,3,4}
  float resistor_values[4]; //Values of current sense resistors
  boolean resistor_active[4]; //Whether a specific resistor is used
  uint16_t warn_temp[3]; //Warn temp for transistor, resistor, and external respectively in ADC units: {0,0,0}
  uint16_t fault_temp[3]; //Fault temp for transistor, resistor, and external respectively in ADC units: {0,0,0}
  uint16_t driver_fan[2]; //Driver fan min and max temperatures in ADC units: {65535, 65535}
  uint16_t ext_fan[2]; //External fan min and max temperatures in ADC units: {65535, 65535}
  uint8_t fan_channel; //Ext output channel used to send fan PWM signal
  int ext_therm_resistance; //External thermistor nominal resistance at 25°C
  int ext_therm_beta; //Beta value of external thermistor
  uint8_t audio_volume[2]; //Status and alarm volumes for transducer: {10, 100}
  uint16_t pushbutton_intensity; //LED intensity in PWM units
  uint8_t pushbutton_mode; //LED illumination mode when alarm is active
  uint32_t checksum; //Checksum to confirm that configuration is valid
};


struct syncStruct{ //160 bytes
  const static uint8_t prefix = 4;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  uint8_t mode; //Type of sync - digital, analog, confocal, etc.
  uint8_t sync_output_channel; //Channel to output sync signal
  
  uint8_t digital_channel; //The input channel for the sync signal
  uint8_t digital_mode[2]; //The digital sync mode  in the LOW and HIGH trigger states respectively
  uint8_t digital_led[2]; //The active LED channel in the LOW and HIGH trigger states respectively
  uint16_t digital_pwm[2]; //The PWM value in the LOW and HIGH trigger states respectively
  uint16_t digital_current[2]; //The DAC value in the LOW and HIGH trigger states respectively
  uint32_t digital_duration[2]; //The maximum number of milliseconds to hold LED state
  char digital_sequence[2][22]; // The file paths to the corresponding sequence files on the SD card
  
  uint8_t analog_channel; //The input channel for the sync signal
  uint8_t analog_mode; //The analog sync mode
  uint8_t analog_led; //The active LED channel
  uint8_t analog_pwm; //ADC averages per PWM update
  uint16_t analog_current; //ADC averages per DAC update

  boolean shutter_polarity; //Shutter polarity when scan is active
  uint8_t confocal_channel; //The input channel for the line sync signal
  boolean confocal_sync_mode; //Whether the line sync is digital (true) or analog (false)
  boolean confocal_sync_polarity[2]; //Sync polarity for digital and analog sync inputs
  uint16_t confocal_threshold; //Threshold for analog sync trigger
  boolean confocal_scan_mode; //Whether scan is unidirectional (true) or bidrectional (false)
  uint32_t confocal_delay[3]; //Delay in clock cycles for each sync delay
  
  uint8_t confocal_mode[2]; //The digital sync mode  in the image and flyback states respectively
  uint8_t confocal_led[2]; //The active LED channel in the image and flyback states respectively
  uint16_t confocal_pwm[2]; //The PWM value in the image and flyback states respectively
  uint16_t confocal_current[2]; //The DAC value in the image and flyback states respectively
  uint32_t confocal_duration[2]; //The maximum number of milliseconds to hold LED state
  char confocal_sequence[2][22]; // The file paths to the corresponding sequence files on the SD card

  uint32_t checksum; //Checksum to confirm that configuration is valid
};

struct statusStruct{
  uint16_t knob; //ADC value of intensity know
  boolean toggle; //position of mode toggle switch
  uint16_t temp[3]; //ADC temp reading of mosfet, resistor, and external respectively
  uint16_t fan_speed[2]; //PWM valur for internal and external fan respectively
  uint16_t led_current; //DAC value for active LED
};

//Convert between byte list and float
union FLOATUNION
{
 float float_var;
 uint8_t bytes[4];
};

//Convert between byte list and int
union INTUNION
{
 int int_var;
 uint8_t bytes[4];
};

//Convert between byte list and int
union BYTEUNION
{
 uint16_t bytes_var;
 uint8_t bytes[2];
};

//From: https://forum.arduino.cc/index.php?topic=263107.0
union CONFIGUNION //Convert binary buffer <-> config setup
{
   configurationStruct c;
   byte byte_buffer[160];
};

union SYNCUNION //Convert binary buffer <-> sync setup
{
   syncStruct s;
   byte byte_buffer[164];
};

//ADC *adc = new ADC(); // adc object;
pinSetup pin;
usbSerial usbSerial;

FLOATUNION floatUnion; //Convert byte list <-> float
INTUNION intUnion;
BYTEUNION byteUnion;
CONFIGUNION conf;
SYNCUNION sync;

void setup() {
  defaultConfig();
  sync.s.mode = 10;
  
  pinMode(LED_BUILTIN, OUTPUT);
  pin.configurePins();
  usbSerial.startSerial();
  digitalWriteFast(pin.RELAY[3], HIGH);
  digitalWriteFast(pin.INTERLINE, LOW);
  digitalWriteFast(pin.ANALOG_SELECT, LOW);
  digitalWriteFast(pin.FAN_PWM, LOW);
  analogWrite(A21, 4095);
  Serial.begin( 9600 );
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }
  uint8_t counter;
//  for(int a=0; a<4096; a++){
//    EEPROM.get(a, counter);
//    Serial.print(a);
//    Serial.print(", ");
//    Serial.println(counter);
//  }
  int test = sizeof(conf.c);
  Serial.println(test);
  test = sizeof(sync.s);
  Serial.println(test);
  Serial.println(conf.c.pushbutton_intensity);
  uint16_t temp = pin.tempToAdc(30, 4700, 25, 3545);
  Serial.println(temp);
}

void defaultConfig(){
  strcpy(conf.c.driver_name, "Unnamed driver ");
  strcpy(conf.c.led_names[0], "LED #1         ");
  strcpy(conf.c.led_names[1], "LED #2         ");
  strcpy(conf.c.led_names[2], "LED #3         ");
  strcpy(conf.c.led_names[3], "LED #4         ");
  for(int a=0; a<4; a++){
    conf.c.led_active[a] = false;
    conf.c.current_limit[a] = 0;
    conf.c.led_channel[a] = a+1;
  }
  conf.c.resistor_values[0] = 5;
  conf.c.resistor_values[1] = 10;
  conf.c.resistor_values[2] = 1000;
  conf.c.resistor_values[3] = 1000;
  
  conf.c.resistor_active[0] = true;
  conf.c.resistor_active[1] = true;
  conf.c.resistor_active[2] = false;
  conf.c.resistor_active[3] = false;

  for(int a=0; a<3; a++){
    conf.c.warn_temp[a] = 14604; //Warn at 60°C
    conf.c.fault_temp[a] = 8891; //Fault at 80°C
  }
  conf.c.driver_fan[0] = 29565; //Fan on at 30°C, fan max at 60°C
  conf.c.driver_fan[1] = 14604;
  conf.c.ext_fan[0] = 29565; //Fan on at 30°C, fan max at 60°C
  conf.c.ext_fan[1] = 14604;

  conf.c.fan_channel = 0; //Ext output channel used to send fan PWM signal
  conf.c.ext_therm_resistance = 4700; //External thermistor nominal resistance at 25°C
  conf.c.ext_therm_beta = 3545; //Beta value of external thermistor
  conf.c.audio_volume[0] = 10;
  conf.c.audio_volume[1] = 100;
  conf.c.pushbutton_intensity = 65535; //LED intensity in PWM units
  conf.c.pushbutton_mode = 0; //LED illumination mode when alarm is active
  conf.c.checksum = 0;
}


//--------------------------------------------------------------SYNCS----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Loop will act as sync router based on toggle switch position
void loop() {
  
  //usbSerial.checkBuffer();
  float test = pin.resistorTemp();

//  boolean state[] = {false, false, false, false, false};
//  int a = 0;
//  float mos_temp;
//  float res_temp;
//  float ext_temp;
//  noInterrupts();
//  pinMode(pin.SDA0, OUTPUT);
//  pinMode(pin.SCL0, OUTPUT);
//  pinMode(pin.INPUTS[0], INPUT);
//  
//  while(true){
//    a = analogRead(pin.MOSFET_TEMP);
//    digitalWriteFast(pin.OUTPUTS[2], HIGH);
//    ext_temp = pin.mosfetTemp();
//    digitalWriteFast(pin.OUTPUTS[2], LOW);
//    
//    Serial.print(a);
//    Serial.print(" = ");
//    Serial.print(ext_temp);
//    Serial.println("°C");
//    delay(100);
//    
//    /*
//    a = convertTemp(ext_temp);
//    Serial.println(a);
//    Serial.println();
//    /*
//    if(state[0] && a>500){
//      digitalWriteFast(pin.OUTPUTS[2], state[0]);
//      state[0] = !state[0];
//    }
//    else if(!state[0] && a<500){
//      digitalWriteFast(pin.OUTPUTS[2], state[0]);
//      state[0] = !state[0];
//    }
//    */
//  }
  
  /*
  while(true){
    a = digitalReadFast(INPUT_PIN[0]);
    digitalWriteFast(OUTPUT_PIN[2], a);

    a = digitalRead(INPUT_PIN[0]);
    if(state[0] && a){
      digitalWriteFast(OUTPUT_PIN[2], HIGH);
      state[0] = false;
    }
    else if(!state[0] && !a){
      digitalWriteFast(OUTPUT_PIN[2], LOW);
      state[0] = true;
    }
  }
  */
  /*
  while(true){
    ext_temp = (float) adc->adc1->analogRead(INPUT_PIN[0]);
    ext_temp = ext_temp/adc->adc0->getMaxValue();
    ext_temp = round(ext_temp*100);
    for(a=0; a<ext_temp; a++){
      Serial.print(" ");
    }
    Serial.println("X");
    delay(5);
    
    digitalWriteFast(OUTPUT_PIN[0], HIGH);
    digitalWriteFast(OUTPUT_PIN[2], HIGH);
    delayMicroseconds(1);
    digitalWriteFast(OUTPUT_PIN[0], LOW);
    digitalWriteFast(OUTPUT_PIN[2], LOW);
    delayMicroseconds(1);
    
  }
*/
  

/*
  analogWriteFrequency(INTERLINE_PIN, 117187); // Teensy 3.0 pin 3 also changes to 375 kHz
  analogWriteResolution(9);
  while(true){
    if(digitalRead(PUSHBUTTON_PIN[a])){
        delay(DEBOUNCE);
        state[a] = !state[a];
        digitalWriteFast(LED_PIN[a], state[a]);
        while(digitalRead(PUSHBUTTON_PIN[a])) delay(DEBOUNCE);
        delay(DEBOUNCE);
    }
    if(state[a]){
      digitalWriteFast(INTERLINE_PIN, HIGH);
    }
    else{
      digitalWriteFast(INTERLINE_PIN, LOW);
    }
  }    
  */
  
  /*
  float val = sin(phase) * 2000.0 + 2050.0;
  analogWrite(A21, (int)val);
  phase = phase + 0.02;
  if (phase >= twopi) phase = 0;
  while (usec < 5) ; // wait
  usec = usec - 5;
 */
/*  
  digitalWriteFast(RELAY_PIN[3], HIGH);
  digitalWriteFast(LED_BUILTIN, HIGH);
  delay(4000);
  digitalWriteFast(RELAY_PIN[3], LOW);
  digitalWriteFast(LED_BUILTIN, LOW);
  delay(4000);
*/  
  
/*
  while(true){
    for(a=0; a<sizeof(PUSHBUTTON_PIN)/sizeof(PUSHBUTTON_PIN[0]); a++){
      if(digitalRead(PUSHBUTTON_PIN[a])){
        delay(DEBOUNCE);
        state[a] = !state[a];
        digitalWriteFast(LED_PIN[a], state[a]);
        while(digitalRead(PUSHBUTTON_PIN[a])) delay(DEBOUNCE);
        delay(DEBOUNCE);
        if(state[a]){
          analogWrite(FAN_PWM_PIN, a*1000+1000);
        }
        else{
          analogWrite(FAN_PWM_PIN, 0);
        }
      }
    }
    if(digitalRead(TOGGLE_PIN) != state[4]){
      delay(DEBOUNCE);
      state[4] = !state[4];
      digitalWriteFast(LED_BUILTIN, state[4]);
    }
  }
 */ 
}


/*

//--------------------------------------------------------------INITIALIZE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void initializeDevice(){
  initialized = false;
  nTry = NINITIALIZE;
  while(Serial.available()) Serial.read(); //Flush all remaining bytes from input buffer
  while(!initialized){ //Repeat initialization until a successful initialization 
    while(Serial.read() && nTry){ //Keep sending header until 0 is received (no data = -1 which is "true") or counter reaches 0;
      for(a=HEADER; a<IDSIZE; a++) txPacket[a] = IDARRAY[a-HEADER]; //Load ID into txPacket
      buildPacket(IDPACKET, IDSIZE); //Add header
      Serial.write(txPacket, IDSIZE); //Send assembled data packet to GUI
      packetError();
      nTry--;
    }
    if(!initialized && !nTry){ //If a valid setup packet was not found after n tries, use default values
      checkSetup(); //make sure default values are valid, and boot from them
      if(initialized && NOSERIAL) Serial.end(); //If default is valid and no serial is requested in manual mode, turn off serial
      nTry = NINITIALIZE; //Reset the retry counter
    }
    else processReceivedPackets(); //If there was a successful connection, try and get the incoming setup packet or disconnect packet
  }

  //Once initialized, turn on interrupts to begin monitoring the device
  TIMSK0 |= _BV(OCIE0A);

  //Speed up serial as commands will take 160us to transmit
  Serial.setTimeout(RUNTIMEOUT);

  //Disable serial if in manual mode and NOSERIAL is true
  if(NOSERIAL) Serial.end();

  //Build LED state variables to toggle LED as specified
  if(DELAYORDER){ //If LED is to be turned off on trigger
    LEDstate1 = B11111100; //Turn off LED on trigger (NEG)
    if(LEDSOURCE) LEDstate0 = B11110100; //Set to AWG before trigger
    else LEDstate0 = B11101100; //Set to EXT before trigger
  }
  else{ //If LED is to be turned on on trigger
    LEDstate0 = B11111100; //Turn off LED before trigger (NEG)
    if(LEDSOURCE) LEDstate1 = B11110100; //Set to AWG after trigger
    else LEDstate1 = B11101100; //Set to EXT after trigger
  }

  //Set second resistor on AWG to 0 ohms
  PORTB &= B11111110;
  SPI.beginTransaction(SPISettings(20000000, MSBFIRST, SPI_MODE0));
  SPI.transfer16(256);
  SPI.endTransaction();
  PORTB |= B00000001;

  //Get state of toggle switch
  toggleSwitch = (PIND & B00000100);

}

//Parse the setup packet and then check if valid
void setupPacket(){
  //Confirm checksum
  checkSum = 0;
  for(a=rxStart+HEADER; a<rxStart + SETUPSIZE; a++){
    checkSum += rxBuffer[a];
  }
  for(a=rxIndex; a < rxIndex+SETUPSIZE; a++) Serial.write(rxBuffer[a]);
  Serial.write(checkSum);
  Serial.write(checkSum);
  Serial.write(rxBuffer[rxStart+3]);
  Serial.write(rxBuffer[rxStart+3]);
  if(rxBuffer[rxStart+3] != checkSum) return; //If checksum is not valid, exit parsing function and continue searching for valid setup packet
  
  rxStart += HEADER; //Move the index forward to start of data
  //Use a++ as index to parse packet so that the txPacket index is automatically moved to the end of the packet since otherwise the 0 bytes within the packet can be interpreted as start indeces
  WARNTEMP[0] = rxBuffer[rxStart++]; //warn temps, warn of overheating at 60oC (60oC = 98 on 8-bit ADC)
  WARNTEMP[1] = rxBuffer[rxStart++];
  WARNTEMP[2] = rxBuffer[rxStart++];
  FAULTTEMP[0] = rxBuffer[rxStart++]; //fault temps. enter fault at 80oC (80oC = 66 on 8-bit ADC)
  FAULTTEMP[1] = rxBuffer[rxStart++];
  FAULTTEMP[2] = rxBuffer[rxStart++];
  bytesToUint16.bValue[0] = rxBuffer[rxStart++]; //Assemble uint16_t value
  bytesToUint16.bValue[1] = rxBuffer[rxStart++]; //Assemble uint16_t value
  DELAY1 = bytesToUint16.value; //Delay from previous event before LED is turned on
  bytesToUint16.bValue[0] = rxBuffer[rxStart++]; //Assemble uint16_t value
  bytesToUint16.bValue[1] = rxBuffer[rxStart++]; //Assemble uint16_t value
  DELAY2 = bytesToUint16.value; //Delay from previous event before LED is turned off
  bytesToUint16.bValue[0] = rxBuffer[rxStart++]; //Assemble uint16_t value
  bytesToUint16.bValue[1] = rxBuffer[rxStart++]; //Assemble uint16_t value
  ATHRESHOLD = bytesToUint16.value; //Threshold for analog trigger
  DELAYORDER = rxBuffer[rxStart++]; //Order of delays before trigger (0 = LED starts off, 1 = LED starts on);
  DELAYUNITS = rxBuffer[rxStart++]; //us or ms delay - confocal sync will always use us - us is also capped at 16383 (0 = us; 1 = ms)
  FANMINTEMP = rxBuffer[rxStart++]; //LED temp at which the PWM fan runs at minimum speed, - default to room temp (25oC = 173 on 8-bit ADC)
  FANMAXTEMP = rxBuffer[rxStart++]; //LED temp above which the PWM fan runs at maximum speed, - default to warn temp 
  TRIGGER = rxBuffer[rxStart++]; //trigger (0=toggle, 1=analog, 2=digital, 3=digital activates analog - such as shutter open then trigger off of fast mirror)
  ANALOGSEL = rxBuffer[rxStart++]; //analog select (3 = diode, 4 = raw) 
  FAULTLED = rxBuffer[rxStart++] & B00000100; //Alarm to alert to warning temperature (0=false, 4=true) - use bitmask for safety (protects other pins from being accidentally overwritten in the event of a bad byte)
  FAULTVOLUME = rxBuffer[rxStart++]; //Alarm to alert to fault temperature
  STARTVOLUME = rxBuffer[rxStart++]; //Volume of short tone upon initializing
  PWMFAN = rxBuffer[rxStart++]; //Digital I/O as PWM fan controller (0=N/A, 1=on)   
  FANPIN = rxBuffer[rxStart++] & B01100000; //Which digital ouput to use to drive the fan (0=N/A, 32=I/O 1, 64=I/O 2)
  SYNCTYPE = rxBuffer[rxStart++]; //sync type (0=regular, 1=confocal sync (pipeline syncs through fast routines)
  DTRIGGERPOL = rxBuffer[rxStart++]; //digital trigger polarity (0 = Low, 1 = High)
  ATRIGGERPOL = rxBuffer[rxStart++]; //analog trigger polarity (0 = Falling, 1 = Rising)
  SHUTTERTRIGGERPOL = 0; //Shutter trigger polarity (0 = Low, 1 = High) - only used for confocal syncs
  LEDSOURCE = rxBuffer[rxStart++]; //LED intensity signal source (0 = Ext source, 1 = AWG source)
  TRIGHOLD = rxBuffer[rxStart++]; //trigger hold (0 = single shot, 1 = repeat until trigger resets), 
  AWGSOURCE = rxBuffer[rxStart++]; //AWG source (0=txPacket, 1=mirror the intensity knob),             
  SYNCOUT = rxBuffer[rxStart++] & B01000000; //Digital I/O 2 as sync out (0=false, 64=true) - use bitmask for safety (protects other pins from being accidentally overwritten in the event of a bad byte) *************CHECK: don't use a++ as next call to for-loop will also index a forward one?**********************************

  //Check that setup values are valid
  checkSetup();
}

//Check setup variables to make sure they are valid before configuring the device to them
void checkSetup(){
  for(a=0; a<3; a++){
    if(WARNTEMP[a] <= FAULTTEMP[a] || WARNTEMP[a] > 245 || FAULTTEMP[a] > 245 || WARNTEMP < 10 || FAULTTEMP < 10) return; //Setup is not valid if set temps are at the edge of the ADC range (roughly <-25oC or >180oC for standard thermistors)
  }

  //Check that packet values are valid
  if(FANMAXTEMP < FANMINTEMP && TRIGGER < 3 && (ANALOGSEL-3) < 2 && FAULTVOLUME < 128 && STARTVOLUME < 128 && ATHRESHOLD < 1024 && AWGSOURCE < 3){ //Check numerical values for validity
    if((!FAULTLED || FAULTLED == 4) && (!FANPIN || FANPIN == 32 || FANPIN == 64) && (!SYNCOUT || SYNCOUT == 64)){ //Check pin ID variables
      if(DELAYORDER < 2 && DELAYUNITS < 2 && PWMFAN < 2 && SYNCTYPE < 2 && DTRIGGERPOL < 2 && ATRIGGERPOL < 2 && SHUTTERTRIGGERPOL < 2 && LEDSOURCE < 2 && TRIGHOLD < 2 && SYNCOUT < 2){ //Check boolean variables - d
        if((!SYNCTYPE == DELAYUNITS) || !SYNCTYPE){ //Confirm that the delay units are in us if using a confocal sync
          if((!DELAYUNITS && (DELAY1 < 16384 && DELAY2 < 16384)) || DELAYUNITS){ //If us, make sure that value does not exceed 16383 cap - https://www.arduino.cc/reference/en/language/functions/time/delaymicroseconds/
            if(!SYNCTYPE || TRIGGER){ //Only analog or digital triggers for confocal
              for(a=rxIndex; a < rxIndex+SETUPSIZE; a++) txPacket[a-rxIndex] = rxBuffer[a];
              Serial.write(txPacket, SETUPSIZE); //Send received setup back back to computer for confirmation               
              //If setup is valid, then initialization is successful
              initialized = true;
              SPI.end(); //End SPI so that locks on warning LED and buzzer are released
              PORTB |= FAULTLED; //Turn on warning LED
              for(a=0; a<500; a++){ //Generate tone for 0.1 seconds
                PORTB |= B00010000;
                delayMicroseconds(STARTVOLUME);
                PORTB &= B11101111;
                delayMicroseconds(255-STARTVOLUME);
              }
              delay(1000); //Wait for reset from GUI in case setup packet does not match
              PORTB &= B11111011; //Turn off warning LED
              SPI.begin(); //Re-start SPI 
            } 
          }
        }                    
      }
    }
  }
}


//--------------------------------------------------------------SERIAL---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Assemble header onto packet
//Packet structure is: byte(0) STARTBYTE -> byte(1) packet identifier -> byte(2) packet total length -> byte(3) checksum (data only, excluding header) -> byte(4-n) data packet;
void buildPacket(uint8_t identifier, uint8_t packetSize){
  checkSum = 0; //Initialize the checksum
  txPacket[0] = STARTBYTE;
  txPacket[1] = identifier; //Add identifier to data packet
  txPacket[2] = packetSize; //Add packet length to data packet
  for(a=HEADER; a<packetSize; a++) checkSum += txPacket[a]; //Calculate checksum
  txPacket[3] = checkSum; //Add checksum to data packet
}

//To minimize lag, retrieve only one byte per call, then scan for valid packet.
//byte(0) STARTBYTE -> byte(1) packet identifier -> byte(2) packet length -> byte(3) checksum -> byte(4-n) data packet;
//const uint8_t STARTBYTE = 0; //Identifies start of packet
//const uint8_t IDPACKET = 1; //Identifies packet as device identification packet
//const uint8_t STATUSPACKET = 6; //Identifies packet as temperature recordings - also is number of data bytes in packet
//const uint8_t FAULTPACKET = 10; //Identifies packet as driver entering or exiting fault state - or if received, then commanding driver to enter fault state (i.e. fault test)
//const uint8_t RESETPACKET = 11; //Identifies packet commanding driver to reset
//const uint8_t DISCONNECTPACKET = 12; //Identifies packet commanding driver to reset
//const uint8_t WAVEPACKET = 252; //Identifies packet as recorded analog waveform

void processReceivedPackets(){
  uint8_t packetLength = 0;
  if(!initialized){
    packetLength = Serial.readBytes(rxBuffer, 64); //If not initialized, retrieve the entire rx serial buffer
    if(packetLength >= HEADER+1){ //If minimum number of necessary bytes were recieved, check buffer for setup packet
      for(a=0; a<=(packetLength-HEADER-1); a++){ //Search for valid header in packet
        if(!rxBuffer[a]){ //If start byte is found, check for valid packet
          if(rxBuffer[a+1] == SETUPPACKET && rxBuffer[a+2] == SETUPSIZE && a <= (packetLength - SETUPSIZE + 1)){ //if packet has valid status packet header - parse packet
             rxStart = a; //Initialize rxStart to current index
             rxIndex = a; //Initialize rxIndex to current index (will slide rxIndex to end of packet during confrimation process)
             setupPacket();
             return; //Break loop if setup packet is found
          }
          //Otherwise, if a command of disconnect is received (i.e. GUI initialization) then wait in standby
          else if(rxBuffer[a+1] == DISCONNECTPACKET && rxBuffer[a+2] == COMMANDSIZE && rxBuffer[a+3] == DISCONNECTPACKET && rxBuffer[a+4] == DISCONNECTPACKET && a <= (packetLength - COMMANDSIZE)) driverStandby();
        }
      }
    }
  }
  else{
    packetLength = Serial.readBytes(rxBuffer, 64); //If not initialized, retrieve the entire rx serial buffer
    if(packetLength >= HEADER+1){ //If minimum number of necessary bytes were recieved, check buffer for setup packet
      for(a=0; a<=(packetLength-HEADER-1); a++){ //Search for valid header in packet
        if(!rxBuffer[a]){ //If start byte is found, check for valid packet
          //Packet structure is: byte(0) STARTBYTE -> byte(1) packet identifier -> byte(2) packet total length -> byte(3) checksum (data only, excluding header) -> byte(4-n) data packet;
          if(rxBuffer[a] == 0 && rxBuffer[a+2] == COMMANDSIZE && rxBuffer[a+3] == rxBuffer[a+HEADER]){ //If header is valid, parse the command
            if(rxBuffer[a+1] == rxBuffer[a+HEADER]){ //If command is fixed command with no value (i.e. databyte = ID) 
              if(rxBuffer[a+HEADER] == DISCONNECTPACKET) driverStandby(); //If disconnect is received, stop driver until reconnect resets driver.  This keeps driver from spamming serial buffer
              else if(rxBuffer[a+HEADER] == RESETPACKET) resetPacket(); //If reset command is received, set program line index to and reinitialize driver without hard reset
              else if(rxBuffer[a+HEADER] == FAULTPACKET) failSafe(); //If fault command is received, enter failsafe (i.e. failsafe test). 
            }
            else{
              if(rxBuffer[a+1] == AWGPACKET) updateAWG(rxBuffer[a+HEADER]); 
            }
          }          
        }
      }
    }
  }
}

void updateAWG(uint8_t awg){
  PORTB &= B11111110;
  SPI.beginTransaction(SPISettings(20000000, MSBFIRST, SPI_MODE0));
  SPI.transfer16(awg);
  SPI.endTransaction();
  PORTB |= B00000001;
}
//--------------------------------------------------------------STATES---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void driverStandby(){
  PORTD |= B00011000; //Set analog swich to negative voltage output - this will force the LED off (due to rail offset - grounding the LED would still leave LED with low current)
  PORTB |= B00100000; //Turn on LED 13 to indicate standby
  Serial.end(); //Stop serial communication so Arduino does not spam output buffer
  SPI.end(); //Stop SPI to restore access to PORTB
  TIMSK0 |= _BV(OCIE0A); //Turn interrupts on to continue monitoring driver temperature - and alarm if overtemp
  while(1){ //Hold until reset
    delay(1);
    checkStatus();
  }
}

//In the event of the driver or LED overheating, fail safe automatically turns off the LED circuit until the driver/LED both cool to a safe temperature
void failSafe(){
  uint8_t TIMSK0state = TIMSK0;
  fault = true;
  TIMSK0 &= ~_BV(OCIE0A); //Turn off interrupts - loop calls check status directly to monitor temp
  uint8_t PORTDstate = PORTD; //Record current state of ports so they can be restored after fault
  uint8_t PORTBstate = PORTB;
  
  
  //If fault temp is reached, enter failsafe mode until warn temp is reached
  PORTD |= B00011000; //Set analog swich to negative voltage output - this will force the LED off (due to rail offset - grounding the LED would still leave LED with low current)
  PORTB &= B11111101; //Turn off 5V input to digital pot
  SPI.end(); //End SPI so that locks on warning LED and buzzer are released
  
    
  while(fault){ //Stay in fault mode until all thermistors are recording below the warning temp
    PORTB |= FAULTLED; //Turn on warning LED
    //txPacket[4]=FAULTPACKET; //Send fault packet to GUI
    //buildPacket(FAULTPACKET, COMMANDSIZE);
    //Serial.write(txPacket, COMMANDSIZE); //Send assembled data packet to computer
       
    while(taskIndex){
      checkStatus(); 
      PORTB |= B00010000;
      delayMicroseconds(FAULTVOLUME);
      PORTB &= B11101111;
      delayMicroseconds(255-FAULTVOLUME);
    }
    checkStatus();
    PORTB &= B11111011; //Turn off warning LED
    while(taskIndex){
      checkStatus();
      delayMicroseconds(255);
    }
    checkStatus();
    if(txPacket[HEADER] > WARNTEMP[0] && txPacket[HEADER+1] > WARNTEMP[1] && txPacket[HEADER+2] > WARNTEMP[2]) fault = false; //If all thermistor temps are below the warn temperature, then exit the fault state
  }
  fault = false;
  SPI.begin(); //Restart SPI communication
  PORTB = PORTBstate; //Restore ports to prior configurations
  PORTD = PORTDstate;
  TIMSK0 = TIMSK0state; //Restore Timer0 interrupt settings
}

void manualMode(){
  TIMSK0 |= _BV(OCIE0A); //Turn on millis interrupt timer
  PORTB |= B00000010;
  while(!event){ //Loop until toggle switch changes
    interrupts(); //Maintain interrupts while in manual
    uint16_t anaRead = 0;
    for(a=0; a<64; a++){
      anaRead += analogRead(POT);
    }
    anaRead >>= 8; //Convert sum to byte
    if(anaRead) PORTD = B11110100;
    else PORTD = B11111100;
    updateAWG(anaRead);
    if(updateStatus) checkStatus();
    analogRead(POT); //Refresh pot
  }
}

uint8_t adjustVolume(){//--------------------------------------------------------------------------------------------------------------FINISH INSTALLING THIS SO VOLUME CAN BE ADJUSTED USING KNOB ON PANEL----------------------------------------------------
  uint8_t volume = 0;
  PORTB |= B00000100; //Turn on warning LED
  for(a=0; a<3100; a++){ //Generate tone for 0.1 seconds
    PORTB |= B00010000;
    delayMicroseconds(volume);
    PORTB &= B11101111;
    delayMicroseconds(255-volume);
  }
  volume = (analogRead(5) >> 3);
  PORTB &= B11111011; //Turn off warning LED
  delay(500); //Wait for reset from GUI in case setup packet does not match
  return volume;
}

void packetError(){
  counter = 3;
  while(counter--){
      PORTB |= B00100100; 
      delay(500);
      PORTB &= B11000000;
      delay(500);
  }
  delay(1000);
}
*/